/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.teillet.betgames.api;

import com.teillet.betgames.dto.IllegalInputErrorDto;
import com.teillet.betgames.dto.UserDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-15T22:15:04.936743+01:00[Europe/Paris]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

	/**
	 * DELETE /user : Delete the user with the specified id
	 *
	 * @param usernameDeleteUser The username of the user we want to delete (required)
	 * @return The user is created (status code 200)
	 */
	@ApiOperation(value = "Delete the user with the specified id", nickname = "deleteUser", notes = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The user is created")})
	@DeleteMapping(
			value = "/user"
	)
	ResponseEntity<Void> deleteUser(@NotNull @ApiParam(value = "The username of the user we want to delete", required = true) @Valid @RequestParam(value = "username-delete-user", required = true) String usernameDeleteUser);


	/**
	 * GET /user : Get the user with the specified id
	 * Return the user that match the id
	 *
	 * @param username (optional)
	 * @return Return the user (status code 200)
	 * or Illegal input for operation. (status code 400)
	 */
	@ApiOperation(value = "Get the user with the specified id", nickname = "getUser", notes = "Return the user that match the id", response = UserDto.class, tags = {})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Return the user", response = UserDto.class),
			@ApiResponse(code = 400, message = "Illegal input for operation.", response = IllegalInputErrorDto.class)})
	@GetMapping(
			value = "/user",
			produces = {"application/json"}
	)
	ResponseEntity<UserDto> getUser(@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username);


	/**
	 * PUT /user : Modify the user with the id
	 *
	 * @param userDto The information to modify the user (required)
	 * @return The user is modified (status code 200)
	 */
	@ApiOperation(value = "Modify the user with the id", nickname = "modifyUser", notes = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The user is modified")})
	@PutMapping(
			value = "/user",
			consumes = {"application/json"}
	)
	ResponseEntity<Void> modifyUser(@ApiParam(value = "The information to modify the user", required = true) @Valid @RequestBody UserDto userDto);


	/**
	 * POST /user : Create a user
	 *
	 * @param userDto The information to create the user (required)
	 * @return The user is created (status code 200)
	 */
	@ApiOperation(value = "Create a user", nickname = "registerUser", notes = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The user is created")})
	@PostMapping(
			value = "/user",
			consumes = {"application/json"}
	)
	ResponseEntity<Void> registerUser(@ApiParam(value = "The information to create the user", required = true) @Valid @RequestBody UserDto userDto);

}
