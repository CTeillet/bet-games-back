/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.teillet.betgames.api;

import com.teillet.betgames.dto.AuthRequestDto;
import com.teillet.betgames.dto.AuthResponseDto;
import com.teillet.betgames.dto.DeleteRequestDto;
import com.teillet.betgames.dto.IllegalInputErrorDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-15T22:15:04.936743+01:00[Europe/Paris]")
@Validated
@Api(value = "login", description = "the login API")
public interface LoginApi {

    /**
     * POST /login : Login the user
     * This operation is used to login the user
     *
     * @param authRequestDto (optional)
     * @return The user is connected (status code 200)
     * or The email or the password are wrong (status code 400)
     */
    @ApiOperation(value = "Login the user", nickname = "login", notes = "This operation is used to login the user", response = AuthResponseDto.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The user is connected", response = AuthResponseDto.class),
            @ApiResponse(code = 400, message = "The email or the password are wrong", response = IllegalInputErrorDto.class)})
    @PostMapping(
            value = "/login",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<AuthResponseDto> login(@ApiParam(value = "") @Valid @RequestBody(required = false) AuthRequestDto authRequestDto);


    /**
     * DELETE /login : Logout the user
     *
     * @param deleteRequestDto (optional)
     * @return The user is disconnected (status code 200)
     * or The email or the password are wrong (status code 400)
     */
    @ApiOperation(value = "Logout the user", nickname = "logout", notes = "", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The user is disconnected"),
            @ApiResponse(code = 400, message = "The email or the password are wrong", response = IllegalInputErrorDto.class)})
    @DeleteMapping(
            value = "/login",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> logout(@ApiParam(value = "") @Valid @RequestBody(required = false) DeleteRequestDto deleteRequestDto);

}
